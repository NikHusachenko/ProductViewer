@page "/product/view"
@using Newtonsoft.Json
@using ProductViewer.Client.Components.Static
@using ProductViewer.Client.Models
@using ProductViewer.Client.Models.Product
@using ProductViewer.Client.Models.Product.Enums
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="row">
    <div class="col-md-3">
        <div class="card">
            <div class="card-header">
                Filters
            </div>
            <div class="card-body">
                <label>Minimum price</label>
                <input type="number" class="form-control" min="0" @bind="vm.Order.MinimalPrice" />
                <br />

                <label>Maximum price</label>
                <input type="number" class="form-control" min="0" @bind="vm.Order.MaximumPrice" />
                <br />

                <label>Minimum Rate</label>
                <select class="form-control" @bind="vm.Order.MinimalRate">
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                    <option value="5">5</option>
                </select>
                <br />

                <div class="form-check">
                    <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault" @bind="vm.Order.IsAvailable">
                    <label class="form-check-label" for="flexCheckDefault">
                        Is alailable
                    </label>
                </div>
                <br />

                <label>Order type</label>
                <select class="form-control" @bind="vm.Order.Type">
                    @foreach (string type in SortTypeDisplay.GetFields())
                    {
                        <option value="@type">@type</option>
                    }
                </select>
                <br />

                <label>Order by</label>
                <select class="form-control" @bind="vm.Order.Direction">
                    @foreach (string direction in SortDirectionDisplay.DetFields())
                    {
                        <option value="@direction">@direction</option>
                    }
                </select>
                <br />

                <input type="button" class="btn btn-success float-end" value="Apply" @onclick="OnFiltersApply" />
            </div>
        </div>
    </div>
    <div class="col-md-9">
        <div class="card">
            <div class="card-header">
                Products
            </div>
            <div class="card-body">
                <div class="row">
                    @if (vm.Products != null)
                    {
                        @foreach (ProductViewModel model in vm.Products)
                        {
                            <div class="col-md-3" style="margin-bottom: 10px; border-radius: 5px; background-color: lightgoldenrodyellow; padding: 5px;" dropzone="move" draggable="true" ondragover="event.preventDefault()"
                                @ondragstart="() => OnDragStartHandler(model)"
                                @ondrop="async () => await OnDropHandler(model)"
                                @ondragend="async (e) => await OnDragEndHandler(e)">

                                <Product Model="model" />
                            </div>
                        }
                    }
                </div>

                <br />

                <Pagination CurrentPage="vm.Order.Page" NextPage="_nextPage" PrevPage="_prevPage" 
                    OnFirstPageClick="OnFirstPageClickHandler"
                    OnPrevPageClick="OnPrevPageClickHandler" 
                    OnNextPageClick="OnNextPageClickHandler"
                    OnLastPageClick="OnLastPageClickHandler"/>
            </div>
        </div>
    </div>
</div>

@code {
    private ProductResponseModel vm = new ProductResponseModel();
    private HttpClient _httpClient = new HttpClient();
    private ProductViewModel _draggableModel = null;

    private int? _prevPage = null;
    private int? _nextPage = null;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CreateIfNotExistsFilterParams();
            await InitProducts();
            StateHasChanged();
        }
    }

    private async Task InitProducts()
    {
        string parameters = BuildQueryParams();
        HttpResponseMessage response = await _httpClient.GetAsync($"https://localhost:7294/Producs?{parameters}");
        if (!response.IsSuccessStatusCode)
        {
            return;
        }

        string jsonResponse = await response.Content.ReadAsStringAsync();
        vm = JsonConvert.DeserializeObject<ProductResponseModel>(jsonResponse);

        _prevPage = vm.Order.Page > 1 ? vm.Order.Page - 1 : null;
        _nextPage = vm.Order.Page < vm.PageCount ? vm.Order.Page + 1 : null;
    }

    private string BuildQueryParams()
    {
        return $"Page={vm.Order.Page}&MinimalPrice={vm.Order.MinimalPrice}&MaximumPrice={vm.Order.MaximumPrice}&MinimalRate={vm.Order.MinimalRate}&IsAvailable={vm.Order.IsAvailable}&Type={vm.Order.Type}&Direction={vm.Order.Direction}";
    }

    private async Task CreateIfNotExistsFilterParams()
    {
        var order = await GetFilterParams();
        if (order == null)
        {
            await SaveParams();
        }
        else
        {
            vm.Order = order;
        }
        vm.Order.Page = 1;
    }

    private async Task SaveParams()
        => await JSRuntime.InvokeVoidAsync("localStorage.setItem", "queryParams", JsonConvert.SerializeObject(vm.Order));

    private async Task<ProductOrderModel?> GetFilterParams()
    {
        string orderJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "queryParams");
        return JsonConvert.DeserializeObject<ProductOrderModel>(orderJson);
    }

    private async Task OnFiltersApply(MouseEventArgs e)
    {
        if (e.Button == 0)
        {
            vm.Order.Page = 1;

            await InitProducts();
            await SaveParams();
        }
    }

    private void OnDragStartHandler(ProductViewModel model) => _draggableModel = model;

    private async Task OnDropHandler(ProductViewModel model)
    {
        if (_draggableModel != null)
        {
            if (vm.Order.Type == SortTypeDisplay.GetEnumAsString(SortType.Index))
            {
                SwapProducts(_draggableModel, model);

                await NotifyOrderChanged(_draggableModel);
                await NotifyOrderChanged(model);

                StateHasChanged();
            }
        }
    }

    private async Task OnDragEndHandler(DragEventArgs e) => _draggableModel = null;

    private void SwapProducts(ProductViewModel left, ProductViewModel right)
    {
        int tempIndex = left.Index;
        left.Index = right.Index;
        right.Index = tempIndex;

        vm.Products[left.Index] = left;
        vm.Products[right.Index] = right;
    }

    private async Task NotifyOrderChanged(ProductViewModel model)
    {
        HttpResponseMessage response = await _httpClient.PostAsJsonAsync("https://localhost:7294/api/product/UpdateOrder", new
        {
            Id = model.Id,
            Index = model.Index
        });

        if (response.IsSuccessStatusCode)
        {
            // TODO
        }
    }

    private async void OnFirstPageClickHandler()
    {
        vm.Order.Page = 1;
        await InitProducts();
        await SaveParams();
        StateHasChanged();
    }

    private async void OnPrevPageClickHandler()
    {
        vm.Order.Page--;
        await InitProducts();
        await SaveParams();
        StateHasChanged();
    }

    private async void OnNextPageClickHandler()
    {
        vm.Order.Page++;
        await InitProducts();
        await SaveParams();
        StateHasChanged();
    }

    private async void OnLastPageClickHandler()
    {
        vm.Order.Page = vm.PageCount;
        await InitProducts();
        await SaveParams();
        StateHasChanged();
    }
}